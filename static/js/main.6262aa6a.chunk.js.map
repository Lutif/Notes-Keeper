{"version":3,"sources":["logo.svg","component/Header.jsx","component/Footer.jsx","component/Timer.jsx","component/Note.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","year","Date","getFullYear","Footer","Timer","props","state","startTime","duration","timed","intervalID","start","bind","tick","stop","toggle","this","setState","clearInterval","setInterval","diff","findDuration","miliSeconds","msToTime","ms","h","m","s","Math","floor","console","log","className","type","onChange","onClick","React","Component","Note","contentEditable","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,8HCU5BC,MARf,WACE,OACE,gCACE,+CCHFC,GAAO,IAAIC,MAAOC,cAUPC,MARf,WACE,OACE,gCACE,iDAAuBH,K,0CC2DdI,G,kBA9Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAW,GACXC,SAAU,WACZC,OAAM,GAEN,EAAKC,WAAa,GAClB,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBACV,EAAKE,KAAO,EAAKA,KAAKF,KAAV,gBACZ,EAAKG,OAAS,EAAKA,OAAOH,KAAZ,gBAXC,E,qEAiBfI,KAAKC,SAAS,CAAEV,UAAW,IAAIN,OAC/BiB,cAAcF,KAAKN,YACrBM,KAAKN,WAAaS,YAAYH,KAAKH,KAAM,O,6BAGzCK,cAAcF,KAAKN,c,6BAInB,IAAIU,EAAOJ,KAAKK,aAAaL,KAAKV,MAAMC,WACxCS,KAAKC,SAAS,CAAET,SAAUY,M,mCAGfT,GACX,IAAIW,EAAc,IAAIrB,KAASU,EAE/B,OADUK,KAAKO,SAASD,K,+BAGjBE,GACP,IAAIC,EAAGC,EAAGC,EAOV,OANAA,EAAIC,KAAKC,MAAOL,EAAK,IAAQ,IAC7BE,EAAIE,KAAKC,MAAOL,EAAE,IAAkB,KAIpCC,GAHAA,EAAIG,KAAKC,MAAML,EAAE,OAGT,GAAK,IAAMC,EAAIA,GACZ,KAFXC,EAAIA,EAAI,GAAK,IAAMA,EAAKA,GAEH,KAHrBC,EAAIA,EAAI,GAAK,IAAMA,EAAIA,K,+BAMnBX,KAAKC,SAAS,CAAER,OAAQO,KAAKV,MAAMG,U,+BAIvC,OADIqB,QAAQC,IAAI,iBAAkBf,KAAKV,MAAMG,OAEzC,yBAAKuB,UAAU,kBACf,2BAAOA,UAAU,WAAWC,KAAK,WAAWC,SAAUlB,KAAKD,SACtDC,KAAKV,MAAMG,OAAS,yBAAKuB,UAAU,gBAChC,2BAAIhB,KAAKV,MAAME,UACf,4BAAQwB,UAAU,WAAWG,QAASnB,KAAKL,OAA3C,MACA,4BAAQqB,UAAU,WAAWG,QAASnB,KAAKF,MAA3C,Y,GAzDIsB,IAAMC,YCeXC,MAhBf,WAGE,OAEE,yBAAKN,UAAU,QACb,6BAEE,wBAAIO,gBAAgB,QAApB,YACF,kBAAC,EAAD,OAEA,uBAAGA,gBAAkB,QAArB,2BCUSC,MAbf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCNcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6262aa6a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1>Notes Keeper </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nlet year = new Date().getFullYear();\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <p>Copyright reserved {year}</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport '../CSS/styles.css';\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      startTime: \"\",\r\n      duration: \"00:00:00\",\r\n    timed:true\r\n    };\r\n    this.intervalID = \"\";\r\n    this.start = this.start.bind(this);\r\n    this.tick = this.tick.bind(this);\r\n      this.stop = this.stop.bind(this);\r\n      this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n\r\n    \r\n  start() {\r\n      this.setState({ startTime: new Date() });\r\n      clearInterval(this.intervalID);//clearing previous intervalID incase already running clock\r\n    this.intervalID = setInterval(this.tick, 1000);\r\n  }\r\n  stop() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  tick() {\r\n    let diff = this.findDuration(this.state.startTime);\r\n    this.setState({ duration: diff });\r\n  }\r\n\r\n  findDuration(start) {\r\n    let miliSeconds = new Date() - start;\r\n    let hms = this.msToTime(miliSeconds);\r\n    return hms;\r\n  }\r\n  msToTime(ms) {\r\n    let h, m, s;\r\n    s = Math.floor((ms / 1000) % 60);\r\n    m = Math.floor((ms / (1000 * 60)) % 60);\r\n    h = Math.floor(ms / (1000 * 60 * 60));\r\n    s = s < 10 ? \"0\" + s : s;\r\n    m = m < 10 ? \"0\" + m :  m;\r\n    h = h < 10 ? \"0\" + h : h;\r\n    return h + \":\" + m + \":\" + s;\r\n  }\r\n    toggle() {\r\n        this.setState({ timed: !this.state.timed });\r\n  }\r\n    render() {\r\n        console.log('render timer :', this.state.timed);\r\n    return (\r\n        <div className=\"clockContainer\">\r\n        <input className=\"btnClock\" type='checkbox' onChange={this.toggle}  />\r\n            {this.state.timed && <div className='subContainer'>\r\n                <p>{this.state.duration}</p>\r\n                <button className=\"btnClock\" onClick={this.start}> +</button>\r\n                <button className=\"btnClock\" onClick={this.stop}> x</button>\r\n            </div>}\r\n      </div>);\r\n  }\r\n}\r\n\r\nexport default Timer;","import React from \"react\";\r\nimport Timer from './Timer';\r\nfunction Note() {\r\n\r\n\r\n  return (\r\n    \r\n    <div className=\"note\">\r\n      <div>\r\n\r\n        <h1 contentEditable='true'>Call Sam</h1>\r\n      <Timer/>  \r\n      </div>\r\n      <p contentEditable = 'true' >Call same for inovice</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Note;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Header from \"./component/Header\";\nimport Footer from \"./component/Footer\";\nimport Note from \"./component/Note\";\n\nimport Timer from './component/Timer';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Note />\n      <Note />\n      <Note />\n      <Timer/>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}