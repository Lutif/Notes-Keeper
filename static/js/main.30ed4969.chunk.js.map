{"version":3,"sources":["component/Header.jsx","component/Footer.jsx","component/Timer.jsx","component/Note.jsx","component/CreateArea.jsx","component/App.jsx","serviceWorker.js","index.js"],"names":["Header","year","Date","getFullYear","Footer","Timer","props","state","startTime","duration","timed","intervalID","start","bind","tick","stop","toggle","pause","this","setState","setInterval","clearInterval","pausetime","console","log","diff","findDuration","miliSeconds","msToTime","ms","h","m","s","Math","floor","className","onClick","React","Component","Note","title","content","onDelete","id","CreateArea","useState","isExpanded","setExpanded","note","setNote","handleChange","event","target","name","value","prevNote","onChange","placeholder","rows","Zoom","in","Fab","onAdd","preventDefault","App","notes","setNotes","deleteNote","prevNotes","filter","noteItem","index","newNote","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30ed4969.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1>Keeper </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nlet year = new Date().getFullYear();\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <p>Copyright reserved {year}</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport '../CSS/styles.css';\r\nimport AlarmOnIcon from '@material-ui/icons/AlarmOn';\r\nimport AlarmOffIcon from '@material-ui/icons/AlarmOff';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      startTime: \"\",\r\n      duration: \"00:00:00\",\r\n    timed:true\r\n    };\r\n    this.intervalID = \"\";\r\n    this.start = this.start.bind(this);\r\n    this.tick = this.tick.bind(this);\r\n    this.stop = this.stop.bind(this);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.pause = this.pause.bind(this);\r\n  }\r\n\r\n\r\n    \r\n  start() {\r\n    if (!this.state.startTime) {\r\n      this.setState({ startTime: new Date() });\r\n      clearInterval(this.intervalID);//clearing previous intervalID incase already running clock\r\n      this.intervalID = setInterval(this.tick, 1000);\r\n    }\r\n    else {\r\n      const start = new Date() - this.state.startTime;\r\n      this.setState({ startTime: start });\r\n      this.intervalID = setInterval(this.tick, 1000);\r\n    }\r\n  }\r\n  stop() {\r\n    clearInterval(this.intervalID);\r\n    this.setState({ duration: \"00:00:00\" });\r\n    this.setState({ startTime: '' });\r\n  }\r\n  \r\n  pause() {\r\n    if (this.state.startTime) {\r\n      clearInterval(this.intervalID);\r\n      let pausetime = new Date() - this.state.startTime\r\n      this.setState({ startTime: pausetime });\r\n      console.log(pausetime);\r\n    }\r\n    \r\n  }\r\n\r\n  tick() {\r\n    let diff = this.findDuration(this.state.startTime);\r\n    this.setState({ duration: diff });\r\n  }\r\n\r\n  findDuration(start) {\r\n    let miliSeconds = new Date() - start;\r\n    let hms = this.msToTime(miliSeconds);\r\n    return hms;\r\n  }\r\n  msToTime(ms) {\r\n    let h, m, s;\r\n    s = Math.floor((ms / 1000) % 60);\r\n    m = Math.floor((ms / (1000 * 60)) % 60);\r\n    h = Math.floor(ms / (1000 * 60 * 60));\r\n    s = s < 10 ? \"0\" + s : s;\r\n    m = m < 10 ? \"0\" + m :  m;\r\n    h = h < 10 ? \"0\" + h : h;\r\n    return h + \":\" + m + \":\" + s;\r\n  }\r\n\r\n\r\n    toggle() {\r\n        this.setState({ timed: !this.state.timed });\r\n  }\r\n    render() {\r\n    return (\r\n        <div className=\"clockContainer\">\r\n        {/* <input className=\"btnClock\" type='checkbox' onChange={this.toggle}  /> */}\r\n            {this.state.timed && <div className='subContainer'>\r\n                <p>{this.state.duration}</p>\r\n          <button className=\"btnClock\" onClick={this.start}><AlarmOnIcon /></button>\r\n          <button className=\"btnClock\" onClick={this.pause}><PauseCircleOutlineIcon /></button>\r\n                <button className=\"btnClock\" onClick={this.stop}><AlarmOffIcon/></button>\r\n            </div>}\r\n      </div>);\r\n  }\r\n}\r\n\r\nexport default Timer;","import React from \"react\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Timer from './Timer';\r\nfunction Note(props) {\r\n  function handleClick() {\r\n    props.onDelete(props.id);\r\n  }\r\n\r\n  return (\r\n    <div className=\"note\">\r\n      <h1>{props.title+'   '} <Timer/> </h1>\r\n      <p>{props.content}</p>\r\n      <button onClick={handleClick}>\r\n        <DeleteIcon />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Note;\r\n","import React, { useState } from \"react\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\n\r\nfunction CreateArea(props) {\r\n  const [isExpanded, setExpanded] = useState(false);\r\n\r\n  const [note, setNote] = useState({\r\n    title: \"\",\r\n    content: \"\"\r\n  });\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n\r\n    setNote(prevNote => {\r\n      return {\r\n        ...prevNote,\r\n        [name]: value\r\n      };\r\n    });\r\n  }\r\n\r\n  function submitNote(event) {\r\n    props.onAdd(note);\r\n    setNote({\r\n      title: \"\",\r\n      content: \"\"\r\n    });\r\n    event.preventDefault();\r\n  }\r\n\r\n  function expand() {\r\n    setExpanded(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"create-note\">\r\n        {isExpanded && (\r\n          <input\r\n            name=\"title\"\r\n            onChange={handleChange}\r\n            value={note.title}\r\n            placeholder=\"Title\"\r\n          />\r\n        )}\r\n\r\n        <textarea\r\n          name=\"content\"\r\n          onClick={expand}\r\n          onChange={handleChange}\r\n          value={note.content}\r\n          placeholder=\"Take a note...\"\r\n          rows={isExpanded ? 3 : 1}\r\n        />\r\n        <Zoom in={isExpanded}>\r\n          <Fab onClick={submitNote}>\r\n            <AddIcon />\r\n          </Fab>\r\n        </Zoom>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateArea;\r\n","import React, { useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Note from \"./Note\";\r\nimport CreateArea from \"./CreateArea\";\r\n\r\nfunction App() {\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  function addNote(newNote) {\r\n    setNotes(prevNotes => {\r\n      return [...prevNotes, newNote];\r\n    });\r\n  }\r\n\r\n  function deleteNote(id) {\r\n    setNotes(prevNotes => {\r\n      return prevNotes.filter((noteItem, index) => {\r\n        return index !== id;\r\n      });\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <CreateArea onAdd={addNote} />\r\n      {notes.map((noteItem, index) => {\r\n        return (\r\n          <Note\r\n            key={index}\r\n            id={index}\r\n            title={noteItem.title}\r\n            content={noteItem.content}\r\n            onDelete={deleteNote}\r\n          />\r\n        );\r\n      })}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}